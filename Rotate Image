class Solution {
public:
    //int newVal;
    
//     void solve(const int& y, const int& x, vector<vector<int>>& matrix, const int& count, int& newVal, const int& width) {
//         if(count == 3)
//             return;
        
//         int newRow = x;
//         int newCol = width-(y+1);
//         newVal = matrix[newRow][newCol];
//         std::cout << "old val: " << matrix[y][x] << " | newVal: " << newVal << "\n";
//         solve(newRow, newCol, matrix,count+1,newVal,width);
//         matrix[newRow][newCol] = matrix[y][x];
//     }
    
    // void rotate(vector<vector<int>>& matrix) {
    //     int width = matrix.size();
    //     for(int j = 0; j < matrix.size()/2; j++) {
    //         for(int i = 0; i < width-1; i++) {
    //             solve(i,j,matrix,0,newVal,width);
    //         }
    //         matrix[j][j] = newVal;
    //         width/=2;
    //     }
    // }
    
      void rotate(vector<vector<int>>& matrix) {
        set<pair<int,int>> coords;
        for(int y = 0; y < matrix.size(); y++) {
            for(int x = 0; x < matrix[y].size(); x++) {
                if(coords.find({y,x}) != coords.end())
                    continue;
                int newY = x;
                int newX = matrix.size()-(y+1);
                int tmp = matrix[y][x];
                matrix[y][x] = matrix[newY][newX];
                matrix[newY][newX] = tmp;
                coords.insert({newY,newX});
            }
        }
    }
};
